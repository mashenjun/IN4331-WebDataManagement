Q1:
let $ms:=doc('movie/movies_alone.xml'),$as:=doc("movie/artists_alone.xml")
for $result in $ms/movies/movie
where $result/year>2002
return data($result/title|$result/year)

Q2:
<results>
{
let $ms:=doc('movie/movies_alone.xml'),$as:=doc("movie/artists_alone.xml")
for $result in $ms/movies/movie/actor
return <result>
    {$result/../title}
    <role>{data($result/@role)}</role>    
    </result>
}
</results>

(optional):
<results>
{
let $ms:=doc('/db/movies/movies_alone.xml'),$ad:=doc('/db/movies/artists_alone.xml')
for $x in $ms/movies/movie
for $i in $x/actor
return <result>
    {$x/title}
    <role>{$i/@role/string()}</role>
    </result>
}
</results>


Q3:
let $ms:=doc('movie/movies_alone.xml'),$as:=doc("movie/artists_alone.xml")
for $result in $ms/movies/movie, $artist in $as
where exists($result[./actor/@id=./director/@id])
return data($result/title)

(optional:)
<results>
{
let $ms:=doc('/db/movies/movies_alone.xml'),$ad:=doc('/db/movies/artists_alone.xml')
for $x in $ms/movies/movie
for $y in $x/actor
where $x/director/@id=$y/@id
return $x/title/text()
}
</results>


Q4:
let $ms := doc('movie/movies_alone.xml')
return
    <results>
      <h1>Movies grouped by genre:</h1>
      <ol>{
        for $movie in $ms/movies/movie
        let $genre := $movie/genre
        let $titles := distinct-values($movie/title/text())
        group by $genre 
        return
          <li>
            <h2>{$genre/text()}</h2>
            <ol>{
              for $title in $titles
              return <li>{$title}</li>
            }</ol>
          </li>
        }</ol>
     </results>

(optional:)
<results>
{
let $ms:=doc('/db/movies/movies_alone.xml'),$ad:=doc('/db/movies/artists_alone.xml')
for $x in $ms/movies/movie
let $genre:=$x/genre
let $i:= $x/title/text()
group by $genre
return
    
  <result>
    {<h1>{$genre/text()}</h1>}
    {
    for $title in $i
    return  <p>{$title}</p>
    }    
    </result>
    
}
</results>



Q5:
<results>
{
let $ms:=doc('movie/movies_alone.xml')
for $actorid in distinct-values($ms/movies/movie/actor/@id)
return <actor>
    {$actorid},
    {for $movie in $ms/movies/movie
        where $movie/actor/@id=$actorid 
        return <title>
            {data($movie/title)}
        </title>
    }    
    </actor>
}
</results>

(optinal:)
xquery version "3.0";
<results>
{
let $ms:=doc('/db/movies/movies_alone.xml'),$ad:=doc('/db/movies/artists_alone.xml')

for $y in $ad/artists/artist
return 
<actor>{$y/@id/string()}
{
    for $x in $ms/movies/movie
    for $i in $x/actor
    where $y/@id=$i/@id
    return
        <title>{$x/title/text()}</title>
}
</actor>
    
}
</results>


Q6:
let $ms:=doc('movie/movies_alone.xml'),$as:=doc("movie/artists_alone.xml")
for $movie in $ms/movies/movie
return <title>
    {data($movie/title)}
    <director>
    {
        for $director in $as/artists/artist
        where $director/@id=$movie/director/@id
        return 
            concat($director/last_name,' ',$director/first_name)
    }
    </director>
</title>

(optional:)
<results>
{
let $ms:=doc('/db/movies/movies_alone.xml'),$ad:=doc('/db/movies/artists_alone.xml')
for $x in $ms/movies/movie
return
<p>
{$x/title}
{
for $y in $ad/artists/artist
where $x/director/@id= $y/@id 
return <p>{$y/last_name/text()},{$y/first_name/text()}</p>

}
</p>
}
</results>



Q7:
let $ms:=doc('movie/movies_alone.xml'),$as:=doc("movie/artists_alone.xml")
for $movie in $ms/movies/movie
return <title>
    {data($movie/title)}
    <actors>
    {
        for $artist in $as/artists/artist
        where $artist/@id=$movie/actor/@id
        return 
            <actor>
            {concat($artist/last_name,' ',$artist/first_name)}
            <role>
                {$movie/actor[./@id=$artist/@id]/@role/string()}
            </role>
            </actor>
    }
    </actors>
</title>

(optional:)
<results>
{
let $ms:=doc('/db/movies/movies_alone.xml'),$ad:=doc('/db/movies/artists_alone.xml')
for $x in $ms/movies/movie
return
<p>

{$x/title}
{
    <Actors>   
        {
    for $y in $ad/artists/artist
    for $i in $x/actor
    where $y/@id = $i/@id
    return
       ( $y/last_name,<role>{$i/@role/string()}</role>)
        
        }
    </Actors>
}      
</p>
}

Q8:
<result>{
let $ms:=doc('movie/movies_alone.xml'),$as:=doc("movie/artists_alone.xml")
for $movie in $ms/movies/movie
where count($movie/actor)>=2
return 
    if (count($movie/actor)>2)
    then
        (<title>{data($movie/title)}</title>, <actor>{concat($as//artist[@id=$movie/actor/@id][1]/last_name/text()," ",$as//artist[@id=$movie/actor/@id][1]/first_name/text(),' as ',$movie/actor[1]/@role/string())}</actor>, <actor>{concat($as//artist[@id=$movie/actor/@id][2]/last_name/text()," ",$as//artist[@id=$movie/actor/@id][1]/first_name/text(),' as ',$movie/actor[2]/@role/string())}</actor>, <et-al/>)
    else
        (<title>{data($movie/title)}</title>, <actor>{concat($as//artist[@id=$movie/actor/@id][1]/last_name/text()," ",$as//artist[@id=$movie/actor/@id][1]/first_name/text(),' as ',$movie/actor[1]/@role/string())}</actor>, <actor>{concat($as//artist[@id=$movie/actor/@id][2]/last_name/text()," ",$as//artist[@id=$movie/actor/@id][1]/first_name/text(),' as ',$movie/actor[2]/@role/string())}</actor>)

}
</result>

Q9:
<result>{
let $ms:=doc('movie/movies_alone.xml'),$as:=doc("movie/artists_alone.xml")
for $movie in $ms/movies/movie
where $movie/director/@id=$as//artist[./last_name='Eastwood']/@id and $movie/year>1990
return (<title>
    {data($movie/title)}
    </title>,
    <year>
        {data($movie/year)}</year>)
}
</result>
